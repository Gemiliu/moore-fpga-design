/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include "xparameters.h"

#define NUM_BLOCK 5

int memory_data[40] = {
0x04030301,
0x07030301,
0x08040804,
0x0a050205,
0x04030306,
0x05030308,
0x02030500,
0x01030701,
0x07030902,
0x08030206,
0x04030301,
0x07030301,
0x08040804,
0x0a050205,
0x04030306,
0x05030308,
0x02030500,
0x01030701,
0x07030902,
0x08030206,
0x04030301,
0x07030301,
0x08040804,
0x0a050205,
0x04030306,
0x05030308,
0x02030500,
0x01030701,
0x07030902,
0x08030206,
0x04030301,
0x07030301,
0x08040804,
0x0a050205,
0x04030306,
0x05030308,
0x02030500,
0x01030701,
0x07030902,
0x08030206};

u64 inst_data[10] = {
	0x000000032006100a,
	0x00000006200D1014,
	0x000000032006100a,
	0x00000006200D1014,
	0x000000032006100a,
	0x00000006200D1014,
	0x000000032006100a,
	0x00000006200D1014,
	0x000000032006100a,
	0x00000006200D1014
};

int main()
{
    init_platform();

    u32 *memory_addr, *result_addr, *data_addr, *inst_addr;
    int complete;
    u32 timer;

    memory_addr = (u32 *) XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR;
    result_addr = (u32 *) XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR;
    data_addr = (u32 *) XPAR_AXI_BRAM_CTRL_2_S_AXI_BASEADDR;
    inst_addr = (u32 *) XPAR_AXI_BRAM_CTRL_3_S_AXI_BASEADDR;

    int i;
    for (i = 0; i < 40; i++){
    	memory_addr[i] = memory_data[i];
    	xil_printf("memory_addr[%d] = %x \n",i, memory_addr[i]);
    }

    for (i = 0; i < 10; i++){
    	Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+4*2*i, inst_data[i]);
    	Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+4*2*i + 4, inst_data[i] >> 32);
    }

    //Setup Number of block data
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+200*4, NUM_BLOCK);

    //Reset
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+204*4, 0x1);
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+204*4, 0x0);

    //Enable
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+201*4, 0x1);

    //Wait for Complete
    complete = Xil_In32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+203*4);
    while (complete == 0){
    	complete = Xil_In32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+203*4);
    }

    for (i = 0; i < NUM_BLOCK; i++){
    	xil_printf("result_addr[%d] = %x \n",i, result_addr[i]);
    }

    //Print timer value
    xil_printf("timer = %d \n", Xil_In32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+202*4));

    //Not Enable
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+201*4, 0x0);

    return 0;
}
