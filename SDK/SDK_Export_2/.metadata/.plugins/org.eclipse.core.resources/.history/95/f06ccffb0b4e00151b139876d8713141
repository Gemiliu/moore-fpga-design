/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include "xparameters.h"

int main()
{
    init_platform();

    u32 *memory_addr, *result_addr;
    int complete;
    complete = Xil_In32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+203*4);
    xil_printf("complete %x \n",complete);

    memory_addr = (u32 *) XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR;
    result_addr = (u32 *) XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR;

    *(memory_addr) = 0x04030301;
    *(memory_addr+1) = 0x07030301;
    *(memory_addr+2) = 0x08040804;

    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR, 0x2006100a);
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+1*4, 0x3);


    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+200*4, 0x3);
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+201*4, 0x0);
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+201*4, 0x1);

    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+204*4, 0x1);
    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+204*4, 0x0);



    complete = Xil_In32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+203*4);
    xil_printf("complete %x \n",complete);
    //while (complete == 0){
    	complete = Xil_In32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+203*4);
    	xil_printf("complete %x \n",complete);
    //}
    xil_printf("complete %x \n",complete);
    xil_printf("result_addr %x \n", *(result_addr));

    Xil_Out32(XPAR_MOORE_VOTING_IP_0_S_AXI_BASEADDR+201*4, 0x0);
    print("Hello World\n\r");

    return 0;
}
